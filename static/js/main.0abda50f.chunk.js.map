{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtntext","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","toggleMode","htmlFor","Textform","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","Text","split","reverseText","reverse","toString","replaceAll","newtext","substring","length","join","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0abda50f.chunk.js","sourcesContent":["import React,{useState} from 'react'\n\nexport default function About() {\n    const [myStyle, setMyStyle] = useState({\n        color:`black`,\n        backgroundColor:`white`\n    })\n    const [btntext, setBtntext] = useState(\"Enable Dark Mode\")\n    const toggleStyle = ()=>{\n        if(myStyle.color === `black`){\n            setMyStyle({\n                color:`white`,\n                backgroundColor:`black`,\n                border: `1px solid white`\n            \n            })\n            setBtntext(\"Enable Light Mode\")\n        }else{\n            setMyStyle({\n                color:`black`,\n                backgroundColor:`white`\n    \n                })\n                setBtntext(\"Enable Dark Mode\")\n            \n        }\n    }\n\n    return (\n       \n    <div className=\"container\" style={myStyle}>\n        <h2 className=\"my-3\">About Us</h2>\n      <div className=\"accordion\"  id=\"accordionExample\">\n    <div className=\"accordion-item\" style={myStyle}>\n        <h2 className=\"accordion-header\"  id=\"headingOne\">\n            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n            <strong>Analyze Your text</strong>\n            </button>\n        </h2>\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n            Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\n            </div>\n        </div>\n    </div>\n    <div className=\"accordion-item\" style={myStyle}>\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button className=\"accordion-button collapsed\"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n            <strong>Free to use</strong>\n        </button>\n        </h2>\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n        <div className=\"accordion-body\">\n            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\n        </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingThree\">\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n      <strong>Browser Compatible</strong> \n      </button>\n    </h2>\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\">\n        This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\n      </div>\n    </div>\n  </div>\n  </div>\n  <div className=\"container my-3\">\n   <button onClick={toggleStyle}type=\"button\" className=\"btn btn-outline-danger\">{btntext}</button>    \n  </div>\n   \n</div>\n     \n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    return (\n        \n <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n        </li>\n        \n      </ul>\n      \n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\n      </div>\n\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-danger\" type=\"submit\">Search</button>\n      </form> */}\n      \n    </div>\n  </div>\n</nav>\n        \n    )\n}\nNavbar.propTypes = {title:PropTypes.string.isRequired,\n                    aboutText:PropTypes.string.isRequired}\nNavbar.defaultProps = {title:'Set Title here',\n                        aboutText:'About'\n                    };                    ","\nimport React, { useState } from 'react';\n\n\nexport default function Textform(props) {\n    const handleUpClick = ()=>{\n        // console.log(\"Uppercase was Clicked \" + text);\n        let newText= text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\n    }\n    \n    const handleLoClick = ()=>{\n        // console.log(\"Uppercase was Clicked \" + text);\n        let newText= text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\n    }\n    \n    const handleCopy = () => {\n        console.log(\"I am copy\");\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        text.setSelectionRange(0, 9999);\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Copied to Clipboard\",\"success\");\n\n    }\n\n    const handleClClick = ()=>{\n        // console.log(\"Uppercase was Clicked \" + text);\n        let newText= \"\";\n        setText(newText)\n        props.showAlert(\"text has been Cleared\",\"success\");\n    }\n    const handleReverseText = () => {\n        // console.log(\"Warning your data can be revesed .But don't worry because you can again reverse it to get the correct data.Thank you for using this function.\");\n        const Text = text.split(\"\");\n        let reverseText = Text.reverse().toString().replaceAll(\",\", \"\");\n\n\n        console.log(Text.reverse().toString().replaceAll(\",\", \"\"));\n        setText(reverseText)\n        props.showAlert(\"The String is Reversed!\",\"success\");\n    }\n\n    // const download=(filename, text)=>{\n    //     var element = document.createElement('a');\n    //     element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    //     element.setAttribute('download', filename);\n    //     element.style.display = 'none'; document.body.appendChild(element);\n    //     element.click(); document.body.removeChild(element);\n    //   }\n\n    //   const handlesubstrClick=()=>{\n    //     console.log(\"Clear text was clicked\" + text);\n    //     let newText=text.substring(0,4);\n    //     setText(newText)\n    // }  \n    const del=()=>{\n        let newtext=text.substring(text.length,(text.length-(text.length-1)))       \n        setText(newtext);\n        props.showAlert(\"The text has been Deleted!\",\"success\");\n            }\n\n    // const capitalize = () => {\n        \n    //             let firstchar = text.charAt(0); // storing the first char of the string\n    //             let newText= firstchar.toUpperCase(); // converting that to uppercase\n    //             setText(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\n        \n    //         } \n    // const intoTitleCase = () => {\n    //             let newText = text.split(\" \").map((currentValue) => {\n    //                 let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\n    //                 return newText;\n    //             });\n    //             setText(newText.join(\" \"));\n    //         }     \n    \n    const handleExtraSpaces =()=>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"ExtraSpaces has been removed!\",\"success\");\n    }\n    \n    const handleOnChange = (event)=>{\n        // console.log(\"On change\");\n        setText(event.target.value);\n    }\n\n    const [text, setText] = useState('');\n    // text=\"new Text\" //wrong way to change state\n    // setText=(\"new text\") //correct way to change state\n    return (\n        <>\n        <div className=\"container\" style={{color:props.mode ===`dark`?`white`:`black`}}>\n           <h1>{props.heading}</h1> \n          <div className=\"mb-3\">\n          <textarea className=\"form-control my-4\" value={text} onChange={handleOnChange} style={{backgroundColor : props.mode ==='dark'?'grey':'white' ,color:props.mode ==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\n          </div>  \n          <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Uppercase Format</button>\n          <button className=\"btn btn-primary mx-1\" onClick={handleLoClick} >Lowercase Format</button>                                \n          <button className=\"btn btn-primary mx-1\" onClick={handleCopy} >Copytext</button>  \n          <button className=\"btn btn-primary mx-1\" onClick={handleClClick} >Clear</button>\n          <button className=\"btn btn-primary mx-1\" onClick={handleReverseText} >Reverse Format</button>  \n          {/* <button className=\"btn btn-primary mx-1\" onClick={download} >Download</button>  */}\n          {/* <button className=\"btn btn-primary mx-1\" onClick={handlesubstrClick} >Substring</button>  */}\n          <button className=\"btn btn-primary mx-1\" onClick={del} >Delete</button>\n          {/* <button className=\"btn btn-primary mx-1\" onClick={capitalize} >Capatilize first String</button>  */}\n          {/* <button className=\"btn btn-primary mx-1\" onClick={intoTitleCase} >Titlecase</button>     */}\n          <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces} >Remove Extraspaces</button> \n        </div>\n        <div className=\"container my-3\" style={{color:props.mode ===`dark`?`white`:`black`}}>\n          <h2 className=\"my-4\">Your text Summary</h2>\n          <p>{text.split(\" \").length} Words and {text.length} Characters</p>\n          <p>{0.008*text.split(\" \").length} Minutes to read..</p>\n          <h2 className=\"my-4\">Preview</h2>\n          <p>{text.length>0?text:\"Nothing to preview it here!\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        \n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\n            \n        </div>\n        \n    )\n}\n\nexport default Alert\n","\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(`light`);\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if(mode === `light`){\n      setMode(`dark`);\n      document.body.style.backgroundColor=`#042743`;\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils is Amazing App\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils App Now\";\n      // }, 1500);\n    }else{\n      setMode(`light`);\n      document.body.style.backgroundColor=`white`;\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Light Mode\";\n    }\n    \n  }\n  return (\n  <>\n {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n <Router>\n <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n {/* {<Navbar/>} */}\n<Alert alert={alert} />\n\n<div className=\"container my-5\">\n<Switch>\n          {/* users-->-Component-1\n          users/home-->-->-Component-2 */}\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <Textform heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode} showAlert={showAlert} />\n          </Route>\n</Switch>\n</div>\n</Router>\n{/* <About /> */}\n\n \n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}