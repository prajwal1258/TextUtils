{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","Text","split","reverseText","reverse","toString","replaceAll","newtext","substring","length","join","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4cfeac17.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    return (\n        \n <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n        </li>\n        {/* <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n        </li> */}\n        \n      </ul>\n      \n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\n      </div>\n\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-danger\" type=\"submit\">Search</button>\n      </form> */}\n      \n    </div>\n  </div>\n</nav>\n        \n    )\n}\nNavbar.propTypes = {title:PropTypes.string.isRequired,\n                    aboutText:PropTypes.string.isRequired}\nNavbar.defaultProps = {title:'Set Title here',\n                        aboutText:'About'\n                    };                    ","\nimport React, { useState } from 'react';\n\n\nexport default function Textform(props) {\n    const handleUpClick = ()=>{\n        // console.log(\"Uppercase was Clicked \" + text);\n        let newText= text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\n    }\n    \n    const handleLoClick = ()=>{\n        // console.log(\"Uppercase was Clicked \" + text);\n        let newText= text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\n    }\n    \n    const handleCopy = () => {\n        console.log(\"I am copy\");\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        text.setSelectionRange(0, 9999);\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Copied to Clipboard\",\"success\");\n\n    }\n\n    const handleClClick = ()=>{\n        // console.log(\"Uppercase was Clicked \" + text);\n        let newText= \"\";\n        setText(newText)\n        props.showAlert(\"text has been Cleared\",\"success\");\n    }\n    const handleReverseText = () => {\n        // console.log(\"Warning your data can be revesed .But don't worry because you can again reverse it to get the correct data.Thank you for using this function.\");\n        const Text = text.split(\"\");\n        let reverseText = Text.reverse().toString().replaceAll(\",\", \"\");\n\n\n        console.log(Text.reverse().toString().replaceAll(\",\", \"\"));\n        setText(reverseText)\n        props.showAlert(\"The String is Reversed!\",\"success\");\n    }\n\n    // const download=(filename, text)=>{\n    //     var element = document.createElement('a');\n    //     element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    //     element.setAttribute('download', filename);\n    //     element.style.display = 'none'; document.body.appendChild(element);\n    //     element.click(); document.body.removeChild(element);\n    //   }\n\n    //   const handlesubstrClick=()=>{\n    //     console.log(\"Clear text was clicked\" + text);\n    //     let newText=text.substring(0,4);\n    //     setText(newText)\n    // }  \n    const del=()=>{\n        let newtext=text.substring(text.length,(text.length-(text.length-1)))       \n        setText(newtext);\n        props.showAlert(\"The text has been Deleted!\",\"success\");\n            }\n\n    // const capitalize = () => {\n        \n    //             let firstchar = text.charAt(0); // storing the first char of the string\n    //             let newText= firstchar.toUpperCase(); // converting that to uppercase\n    //             setText(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\n        \n    //         } \n    // const intoTitleCase = () => {\n    //             let newText = text.split(\" \").map((currentValue) => {\n    //                 let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\n    //                 return newText;\n    //             });\n    //             setText(newText.join(\" \"));\n    //         }     \n    \n    const handleExtraSpaces =()=>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"))\n        props.showAlert(\"ExtraSpaces has been removed!\",\"success\");\n    }\n    \n    const handleOnChange = (event)=>{\n        // console.log(\"On change\");\n        setText(event.target.value);\n    }\n\n    const [text, setText] = useState('');\n    // text=\"new Text\" //wrong way to change state\n    // setText=(\"new text\") //correct way to change state\n    return (\n        <>\n        <div className=\"container\" style={{color:props.mode ===`dark`?`white`:`black`}}>\n           <h1>{props.heading}</h1> \n          <div className=\"mb-3\">\n          <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor : props.mode ==='dark'?'grey':'white' ,color:props.mode ==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\n          </div>  \n          <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Uppercase Format</button>\n          <button className=\"btn btn-primary mx-1\" onClick={handleLoClick} >Lowercase Format</button>                                \n          <button className=\"btn btn-primary mx-1\" onClick={handleCopy} >Copytext</button>  \n          <button className=\"btn btn-primary mx-1\" onClick={handleClClick} >Clear</button>\n          <button className=\"btn btn-primary mx-1\" onClick={handleReverseText} >Reverse Format</button>  \n          {/* <button className=\"btn btn-primary mx-1\" onClick={download} >Download</button>  */}\n          {/* <button className=\"btn btn-primary mx-1\" onClick={handlesubstrClick} >Substring</button>  */}\n          <button className=\"btn btn-primary mx-1\" onClick={del} >Delete</button>\n          {/* <button className=\"btn btn-primary mx-1\" onClick={capitalize} >Capatilize first String</button>  */}\n          {/* <button className=\"btn btn-primary mx-1\" onClick={intoTitleCase} >Titlecase</button>     */}\n          <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces} >Remove Extraspaces</button> \n        </div>\n        <div className=\"container my-3\" style={{color:props.mode ===`dark`?`white`:`black`}}>\n          <h2>Your text Summary</h2>\n          <p>{text.split(\" \").length} Words and {text.length} Characters</p>\n          <p>{0.008*text.split(\" \").length} Minutes to read..</p>\n          <h2>Preview</h2>\n          <p>{text.length>0?text:\"Enter something in here in textbox to preview it here.\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        \n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\n            \n        </div>\n        \n    )\n}\n\nexport default Alert\n","\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(`light`);\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if(mode === `light`){\n      setMode(`dark`);\n      document.body.style.backgroundColor=`#042743`;\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils is Amazing App\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils App Now\";\n      // }, 1500);\n    }else{\n      setMode(`light`);\n      document.body.style.backgroundColor=`white`;\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils-Light Mode\";\n    }\n    \n  }\n  return (\n  <>\n {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n {/* <Router> */}\n <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n {/* {<Navbar/>} */}\n<Alert alert={alert} />\n\n<div className=\"container my-3\">\n{/* <Switch> */}\n          {/* users-->-Component-1\n          users/home-->-->-Component-2 */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <Textform heading=\"Enter Text Below to Analyze\" mode={mode} showAlert={showAlert} />\n          {/* </Route> */}\n{/* </Switch> */}\n</div>\n{/* </Router> */}\n{/* <About /> */}\n\n \n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}